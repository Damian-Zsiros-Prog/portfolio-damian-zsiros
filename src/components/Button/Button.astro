---
const {typeElement = 'button', type, text, onClick, id,name,className = "", href, target} = Astro.props
---
<style>
button,a{
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    "Liberation Mono", "Courier New", monospace;
  font-size: 17px;
  padding: 0.6em 2em;
  font-weight: 500;
  background: #1f2937;
  color: white;
  border: none;
  position: relative;
  overflow: hidden;
  border-radius: 0.6em;
  cursor: pointer;
}

.gradient {
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  border-radius: 0.6em;
  margin-top: -0.25em;
  background-image: linear-gradient(
    rgba(0, 0, 0, 0),
    rgba(0, 0, 0, 0),
    rgba(0, 0, 0, 0.3)
  );
}

.label {
  position: relative;
  top: -1px;
}

.transition {
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  transition-duration: 500ms;
  background-color: rgba(16, 185, 129, 0.6);
  border-radius: 9999px;
  width: 0;
  height: 0;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

button:hover .transition,a:hover .transition {
  width: 14em;
  height: 14em;
}

button:active,a:active {
  transform: scale(0.97);
}
</style>

{typeElement == 'a' && 
  <a class={`btn ${className}`} href={href} id={id} target={target}>
    <span class="transition"></span>
    <span class="gradient"></span>
    <span class="label">{text}</span>
  </a>
}
{typeElement == 'button' && 
  <button type={type ?? "button"} class={`btn ${className}`} onclick={onClick} id={id} name={name}>
    <span class="transition"></span>
    <span class="gradient"></span>
    <span class="label">{text}</span>
  </button>
}
